<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luruoyang.mapper.AuthorMapper">
    <!-- 单个 insert -->
    <insert id="insertAuthor"
            parameterType="com.luruoyang.entity.Author"
            useGeneratedKeys="true"
            keyProperty="id" keyColumn="id">
        insert into author(id, username, password, email, bio)
        values (#{id},
                #{username},
                #{password},
                #{email},
                #{bio})
    </insert>
    <!-- 批量 insert  -->
    <insert id="insertAuthors" parameterType="com.luruoyang.entity.Author"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into author
        ( username, password, email, bio)
        values
        <foreach collection="collection" separator="," item="author">
            (#{author.username},#{author.password},#{author.email},#{author.bio})
        </foreach>
    </insert>

    <!-- 单个 update -->
    <update id="updateAuthor" parameterType="com.luruoyang.entity.Author">
        update author
        <set>
            <if test="username != null and username !='' ">
                username = #{username},
            </if>
            <if test="password != null and password !='' ">
                password = #{password},
            </if>
            <if test="email != null and email !='' ">
                email = #{email},
            </if>
            <if test="bio != null and bio !='' ">
                bio = #{bio}
            </if>
        </set>
        where id = #{id}
    </update>

    <!-- 单个 delete -->
    <delete id="deleteAuthor" parameterType="java.lang.Integer">
        delete
        from author
        where id = #{id}
    </delete>

    <!-- sql 片段 列名 -->
    <sql id="authorColumns">
        ${alias}.id, ${alias}.username, ${alias}.password, ${alias}.email, ${alias}.bio
    </sql>

    <select id="selectAuthorById" resultType="map">
        select
        <include refid="authorColumns">
            <property name="alias" value="a"/>
        </include>
        from author a
        where id = #{authorId}
    </select>


    <!-- sql 片段 表名 -->
    <sql id="someTable">
        ${prefix}hor
    </sql>

    <sql id="someInclude">
        from
        <include refid="${include_target}"/>
    </sql>

    <select id="sqlFragsTableName" resultType="map" parameterType="java.lang.Integer">
        select id, name, username
        <include refid="someInclude">
            <property name="prefix" value="aut"/>
            <property name="include_target" value="someTable"/>
        </include>
        <where>
            id = #{authorId}
        </where>
    </select>

    <select id="selectById" resultType="com.luruoyang.entity.Author" parameterType="int">
        select id, username, password, email, bio, name
        from author
        where id = #{authorId}
    </select>



<!--    <select id="findByColumn" resultType="com.luruoyang.entity.Author">-->
    <select id="findByColumn" resultType="Author">
        select id, username, password, email, bio, name
        from author
        where ${column} = #{value}
    </select>
    <select id="findByColumnWithResultTypeMap" resultType="map">
        select id, username, password, email, bio, name
        from author
        where ${column} = #{value}
    </select>
</mapper>