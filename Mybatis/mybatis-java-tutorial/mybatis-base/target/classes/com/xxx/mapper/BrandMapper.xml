<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- Mapper代理必须指定namespace空间为Mapper接口全限定名  -->
<mapper namespace="com.xxx.mapper.BrandMapper">
    <!-- select statement 语句 -->
    <!--    <select id="selectAll" resultType="com.xxx.entity.Brand">-->
    <!--        select * from tb_brand;-->
    <!--    </select>-->

    <!-- 数据库表的字段名和实体属性名称不一样，不能自动封装数据，有2种解决方法
        1. 手动起别名: select 表字段名 as 实体属性名
        2. 定义sql片段: select <sql片段>
        3. 使用 resultMap [最常用]
    -->
    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select id, brand_name as brandName, company_name as companyName, ordered,description,status from tb_brand;-->
    <!--    </select>-->

    <!--    <sql id="brand_column">-->
    <!--        id, brand_name as brandName, company_name as companyName, ordered,description,status-->
    <!--    </sql>-->
    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select-->
    <!--            <include refid="brand_column"/>-->
    <!--        from tb_brand;-->
    <!--    </select>-->

    <resultMap id="brandResultMap" type="brand">
        <!-- id用于主键字段映射 -->
        <!-- <id column="表字段名" property="实体属性名"/> -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>
    <!--    <select id="selectAll" resultType="brand">-->
    <select id="selectAll" resultMap="brandResultMap">
        select
        *
        from tb_brand;
    </select>

    <!-- selectById statement 语句 -->
    <!-- <select id="selectById" resultType="com.xxx.entity.Brand"> -->
    <!--<select id="selectById" resultMap="brandResultMap" >
        select * from tb_brand where id = #{id};
        select * from tb_brand where id = ${id};
    </select> -->

    <!-- 参数占位符
        1. #{ } 替换为问号(?), 防止sql注入
        2. ${ } 参数拼接，存在sql注入

        参数类型：
        1. parameterType，可以省略不写
        2. 特殊字符处理
            转义字符:  &lt;
            CDATA:  <![CDATA[<]]>
    -->

    <!-- <select id="selectById" resultMap="brandResultMap" parameterType="int" > -->
    <select id="selectById" resultMap="brandResultMap">
        <!--select * from tb_brand where id <![CDATA[<]]> #{id};--> <!-- 参数名和什么有关？-->
        select * from tb_brand where id <![CDATA[ = ]]> #{id};
    </select>

    <!-- 条件查询 -->
    <!--<select id="selectByCondition" resultMap="brandResultMap">
        select * from tb_brand
        where status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}
    </select>
-->
    <!-- 动态SQL
        if
        choose(when, otherwise )
        trim(where, set)
        foreach
    -->
    <!-- 动态条件查询
        if ：条件判断，使用 test逻辑表达式
            解决where and 问题：
                1. where 1=1 and
                2. 使用where标签
     -->
    <!--    <select id="selectByCondition" resultMap="brandResultMap">
            select *
            from tb_brand
            where
            <if test="status!=null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName !=''">
                and company_name like #{companyName}
            </if>
            <if test="brandName !=null and brandName!=''">
                and brand_name like #{brandName}
            </if>
        </select>-->
    <!--    <select id="selectByCondition" resultMap="brandResultMap">
            select *
            from tb_brand
            where 1=1
            <if test="status!=null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName !=''">
                and company_name like #{companyName}
            </if>
            <if test="brandName !=null and brandName!=''">
                and brand_name like #{brandName}
            </if>
        </select>-->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status!=null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName !=''">
                and company_name like #{companyName}
            </if>
            <if test="brandName !=null and brandName!=''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

    <!-- 单条件动态查询 -->
    <!--    <select id="selectByConditionSingle" resultMap="brandResultMap">
            select *
            from tb_brand
            where
            <choose> &lt;!&ndash; 类似switch &ndash;&gt;
                <when test="status != null"> &lt;!&ndash; 类似 case &ndash;&gt;
                    status = #{status}
                </when>
                <when test="brandName != null and brandName!=''">
                    brand_name like #{brandName}
                </when>
                <when test="companyName != null and companyName!= ''">
                    company_name like #{companyName}
                </when>
                <otherwise> &lt;!&ndash; 类似 default &ndash;&gt;
                    1 = 1
                </otherwise>
            </choose>
        </select>-->

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose> <!-- 类似switch -->
                <when test="status != null"> <!-- 类似 case -->
                    status = #{status}
                </when>
                <when test="brandName != null and brandName!=''">
                    brand_name like #{brandName}
                </when>
                <when test="companyName != null and companyName!= ''">
                    company_name like #{companyName}
                </when>
                <!--            <otherwise> &lt;!&ndash; 类似 default &ndash;&gt;-->
                <!--                1 = 1-->
                <!--            </otherwise>-->
            </choose>
        </where>
    </select>


    <!--  添加数据 -->
    <!--<insert id="add">
        insert into tb_brand(brand_name,company_name,ordered,description,status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>-->

    <!-- 添加数据，获取主键 -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name,company_name,ordered,description,status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>

    <!-- 更新数据 -->
    <!--<update id="update">
        update tb_brand
        set
            brand_name =#{brandName},
            company_name=#{companyName},
            ordered =#{ordered},
            description=#{description},
            status=#{status}
        where id = #{id};
    </update>-->

    <!--    <update id="update">
            update tb_brand
            set
            <if test="brandName!=null and brandName!=''">
                brand_name =#{brandName},
            </if>
            <if test="companyName!=null and companyName!=''">
                company_name=#{companyName},
            </if>
            <if test="ordered!=null ">
                ordered =#{ordered},
            </if>
            <if test="description!=null and description!=''">
                description=#{description},
            </if>
            <if test="status!=null ">
                status=#{status}
            </if>
            where id = #{id};
        </update>-->

    <!-- 修改动态字段 -->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName!=null and brandName!=''">
                brand_name =#{brandName},
            </if>
            <if test="companyName!=null and companyName!=''">
                company_name=#{companyName},
            </if>
            <if test="ordered!=null ">
                ordered =#{ordered},
            </if>
            <if test="description!=null and description!=''">
                description=#{description},
            </if>
            <if test="status!=null ">
                status=#{status}
            </if>
        </set>
        where id = #{id};
    </update>

    <!-- 根据ID删除 -->
    <delete id="deleteById" >
        delete from tb_brand where id = #{id};
    </delete>

    <!-- 批量删除
        mybatis默认会将数组参数封装为一个map集合
            1. 默认 array = 数组，即默认key为array，值为数组
            2. 使用@Param()注解改变map集合的默认key的名称
    -->
    <delete id="deleteByIds">
        delete from tb_brand where id in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>
</mapper>