user root;

worker_processes 2;
events {
    worker_connections 512;
}

# 输出等级大于等于error的日志
error_log logs/error.log error;

# 上游集群转发：upstream server ip_hash least_conn
# 代理转发：proxy_pass fastcgi_pass grpc_pass
# 镜像转发：mirror

http {
    lua_package_path "$prefix/lib/?.lua;;" ;
    lua_package_cpath "$prefix/service/lib/?.so;;";

    upstream backend1 {
        server www.chrono.com weight=2;
        server www.metroid.net max_fails=5;
    }

    upstream backend2 {
        server 10.0.0.8:8004;
        server 10.0.0.8:8003 backup;
    }
    upstream backend3 {
        server www.luruoyang.com weight=20;
        server www.baidu.com max_fails=50;
    }

    upstream backend4 {
        # 默认轮询 round-robin
        server 10.0.0.8:7006 ;
        server 10.0.0.8:7005 ;
        server 10.0.0.8:7004 ;
        server 10.0.0.8:7003 backup;
    }

    upstream balancer{
        # 占位符
        server 0.0.0.0; 
        balancer_by_lua_file service/balancer.lua;
        keepalive 100;
    }

    server {
        listen 8090;
        server_name *.*;
        access_log logs/access-8090.log ;
        lua_code_cache off;

        # 模拟服务
        location /test-server {
            error_log logs/error-test-server.log error;
            proxy_set_header Host $host;
            # proxy_pass http://backend4;
            proxy_pass http://balancer;
            # content_by_lua_file service/hi.lua;
            body_filter_by_lua_file service/body-filter.lua;

        }

        # 动态上线 下线服务
        location /hi {
            content_by_lua_file service/hi.lua;
        }

        location /static-server {
            access_by_lua_file service/static-server.lua;
            # balancer_by_lua;
            # header_filter_by_lua_file .lua;
            # body_filter_by_lua_file .lua;
        }

        location /dynamic-server {
            access_by_lua_file service/dynamic-server.lua;
            # balancer_by_lua;
            # header_filter_by_lua_file .lua;
            # body_filter_by_lua_file .lua;
        }
    }

    server {
        listen 7004;
        server_name *.*;
        access_log logs/access-7004.log ;
        location / {
            content_by_lua_block {
                local ok, err = ngx.say('hi 10.0.0.8:7004 我是主服务器')
            }
        }


    }

    server {
        listen 7003;
        server_name *.*;
        access_log logs/access-7003.log ;
        location / {
            content_by_lua_block {
                local ok, err = ngx.say('hi 10.0.0.8:7003 我是备份服务器')
            }
        }
    }
    server {
        listen 7005;
        server_name *.*;
        access_log logs/access-7005.log ;
        location / {
            content_by_lua_block {
                local ok, err = ngx.say('hi 10.0.0.8:7005 我是主服务器')
            }
        }
    }

        server {
        listen 7006;
        server_name *.*;
        access_log logs/access-7006.log ;
        location / {
            content_by_lua_block {
                local ok, err = ngx.say('hi 10.0.0.8:7006 我是主服务器')
            }
        }
    }

}